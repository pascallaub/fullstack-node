name: CI Pipeline - Build & Push Docker Images

on:
  push:
    branches: [main, master]
    paths:
      - "k8s/**"
      - ".github/workflows/**" # Um Änderungen an der CI selbst zu erfassen
  pull_request:
    branches: [main, master]
    paths:
      - "k8s/**"
      - ".github/workflows/**"

env:
  FRONTEND_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/mini-notizblock-frontend
  BACKEND_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/mini-notizblock-backend

jobs:
  test:
    name: Test Code
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Frontend Tests
        run: |
          # Prüfe, wo das Frontend liegt und wechsle in das korrekte Verzeichnis
          if [ -d "./frontend" ]; then
            cd ./frontend
          elif [ -d "./node-container/frontend" ]; then
            cd ./node-container/frontend
          elif [ -d "./k8s/frontend" ]; then
            cd ./k8s/frontend
          else
            echo "Frontend directory not found"
            exit 1
          fi
          npm ci
          npm test || echo "No tests found"

      - name: Backend Tests
        run: |
          # Prüfe, wo das Backend liegt und wechsle in das korrekte Verzeichnis
          if [ -d "./backend" ]; then
            cd ./backend
          elif [ -d "./node-container/backend" ]; then
            cd ./node-container/backend
          elif [ -d "./k8s/backend" ]; then
            cd ./k8s/backend
          else
            echo "Backend directory not found"
            exit 1
          fi
          npm ci
          npm test || echo "No tests found"

  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate Tags
        id: tags
        run: |
          COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr '/' '-')
          echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_ENV
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Determine project paths
        id: paths
        run: |
          if [ -d "./frontend" ]; then
            echo "FRONTEND_PATH=./frontend" >> $GITHUB_ENV
          elif [ -d "./node-container/frontend" ]; then
            echo "FRONTEND_PATH=./node-container/frontend" >> $GITHUB_ENV
          elif [ -d "./k8s/frontend" ]; then
            echo "FRONTEND_PATH=./k8s/frontend" >> $GITHUB_ENV
          fi

          if [ -d "./backend" ]; then
            echo "BACKEND_PATH=./backend" >> $GITHUB_ENV
          elif [ -d "./node-container/backend" ]; then
            echo "BACKEND_PATH=./node-container/backend" >> $GITHUB_ENV
          elif [ -d "./k8s/backend" ]; then
            echo "BACKEND_PATH=./k8s/backend" >> $GITHUB_ENV
          fi

      - name: Build & Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.FRONTEND_PATH }}
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE_NAME }}:latest
            ${{ env.FRONTEND_IMAGE_NAME }}:${{ env.BRANCH_NAME }}
            ${{ env.FRONTEND_IMAGE_NAME }}:${{ env.COMMIT_SHA }}
          build-args: |
            VITE_API_URL=/api

      - name: Build & Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.BACKEND_PATH }}
          push: true
          tags: |
            ${{ env.BACKEND_IMAGE_NAME }}:latest
            ${{ env.BACKEND_IMAGE_NAME }}:${{ env.BRANCH_NAME }}
            ${{ env.BACKEND_IMAGE_NAME }}:${{ env.COMMIT_SHA }}

      - name: Image Status
        run: |
          echo "Images erfolgreich gebaut und gepusht:"
          echo "  - ${{ env.FRONTEND_IMAGE_NAME }}:latest"
          echo "  - ${{ env.FRONTEND_IMAGE_NAME }}:${{ env.BRANCH_NAME }}"
          echo "  - ${{ env.FRONTEND_IMAGE_NAME }}:${{ env.COMMIT_SHA }}"
          echo "  - ${{ env.BACKEND_IMAGE_NAME }}:latest"
          echo "  - ${{ env.BACKEND_IMAGE_NAME }}:${{ env.BRANCH_NAME }}"
          echo "  - ${{ env.BACKEND_IMAGE_NAME }}:${{ env.COMMIT_SHA }}"

  # Helm Chart aktualisieren
  update-helm:
    name: Update Helm Chart
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Helm Chart Values
        run: |
          # Image Tags in values.yaml aktualisieren
          sed -i "s|repository:.*frontend-image|repository: ${{ env.FRONTEND_IMAGE_NAME }}|g" ./k8s/myapp-chart/values.yaml
          sed -i "s|repository:.*backend-image|repository: ${{ env.BACKEND_IMAGE_NAME }}|g" ./k8s/myapp-chart/values.yaml
          sed -i "s|tag:.*|tag: \"${{ env.COMMIT_SHA }}\"|g" ./k8s/myapp-chart/values.yaml

      - name: Commit Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add k8s/myapp-chart/values.yaml
          git commit -m "Update image tags to ${{ env.COMMIT_SHA }}" || echo "No changes to commit"
          git push
